# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
plot_ly(state_murder_data, z = Murders, text = Murders, locations = code, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = 'Police Shootings by State', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
plot_ly(state_murder_data, z = Murders, text = Murders, locations = state, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = 'Police Shootings by State', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
plot_ly(state_murder_data, z = Murders, text = Murders, locations = state, type = 'choropleth',
locationmode = 'USA-states', color = toRGB('red'), colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = 'Police Shootings by State', geo = g)
state_murder_data <- mutate(state_murder_data, code = state.abb[grep(state, state.name)])
state_murder_data$state = state.abb[grep(state_murder_data$state, state.name)])
state_murder_data$state = state.abb[grep(state_murder_data$state, state.name)]
state_murder_data$state = state.abb[match(state_murder_data$state, state.name)]
state_murder_data <- group_by(raw_data,state) %>%
summarize(Murders = sum(killed)) %>%
filter(Murders != 0) %>%
arrange(desc(Murders))
state_murder_data$state = state.abb[match(state_murder_data$state, state.name)]
state_murder_data <- group_by(raw_data,state) %>%
summarize(Murders = sum(killed)) %>%
filter(Murders != 0) %>%
arrange(desc(Murders))
state_murder_data$state = state.abb[match(state_murder_data$state, state.name)]
state_murder_data$state = state.abb[match(state_murder_data$state, state.name)]
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
plot_ly(state_murder_data, z = Murders, text = Murders, locations = state, type = 'choropleth',
locationmode = 'USA-states', color = toRGB('red'), colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Murders")) %>%
layout(title = 'Police Shootings by State', geo = g)
---
title: "Assignment 6"
output: html_document
---
```{r, echo=FALSE,message=F,warning=F}
require(dplyr)
require(plotly)
require(magrittr)
require(knitr)
raw_data <- read.csv("/Users/kylegoodwin/INFO498F/a6-mapping-shootings/data/Mass-Shooting-Data.csv")
num_deadly <- filter(raw_data, killed > 0)$state %>% length()
murdered <- group_by(raw_data,city) %>%
summarize(Murders = sum(killed)) %>%
filter(Murders != 0) %>%
arrange(desc(Murders))
state_murder_data <- group_by(raw_data,state) %>%
summarize(Murders = sum(killed)) %>%
filter(Murders != 0) %>%
arrange(desc(Murders))
lives_lost <- sum(raw_data$killed)
num_shootings <- length(raw_data$state)
```
In 2015 in the United States, there were
`r kable(murdered)`
```{r, echo=FALSE}
map_data <- mutate(raw_data,hover= paste0(city,': ', killed, " Killed | ",injured, " Injured"))
map_data <- mutate(map_data, size = killed + injured)
options <- list(
scope='usa',
showland=TRUE,
subunitcolor=toRGB("black"),
countrycolor=toRGB("black"),
landcolor=toRGB("gray"),
countrywidth=.5,
contryheight=.5
)
m <- list(colorbar = list(title ="Number of People Killed"))
plot_ly(map_data,lat=lat,lon=lng,type='scattergeo', text = hover, size = size, locationmode='USA-states', color = toRGB('red'), mode='markers', hoverinfo = "text", marker=m) %>%
layout(title = "Police Shootings in the US for 2015", geo=options)
```
```{r, echo=FALSE}
state_murder_data$state = state.abb[match(state_murder_data$state, state.name)]
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
plot_ly(state_murder_data, z = Murders, text = Murders, locations = state, type = 'choropleth',
locationmode = 'USA-states', color = toRGB('red'), colors = 'Reds',
marker = list(line = l), colorbar = list(title = "Murders")) %>%
layout(title = 'Police Shootings by State', geo = g)
```
state_murder_data$state = state.abb[match(state_murder_data$state, state.name)]
# give state boundaries a white border
l <- list(color = toRGB("black"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
plot_ly(state_murder_data, z = Murders, text = Murders, locations = state, type = 'choropleth',
locationmode = 'USA-states', color = toRGB('red'), colors = 'Reds',
marker = list(line = l), colorbar = list(title = "Murders")) %>%
layout(title = 'Police Shootings by State', geo = g)
---
title: "Assignment 6"
output: html_document
---
```{r, echo=FALSE,message=F,warning=F}
require(dplyr)
require(plotly)
require(magrittr)
require(knitr)
raw_data <- read.csv("/Users/kylegoodwin/INFO498F/a6-mapping-shootings/data/Mass-Shooting-Data.csv")
num_deadly <- filter(raw_data, killed > 0)$state %>% length()
murdered <- group_by(raw_data,city) %>%
summarize(Murders = sum(killed)) %>%
filter(Murders != 0) %>%
arrange(desc(Murders))
state_murder_data <- group_by(raw_data,state) %>%
summarize(Murders = sum(killed)) %>%
filter(Murders != 0) %>%
arrange(desc(Murders))
lives_lost <- sum(raw_data$killed)
num_shootings <- length(raw_data$state)
```
In 2015 in the United States, there were
`r kable(murdered)`
```{r, echo=FALSE}
map_data <- mutate(raw_data,hover= paste0(city,': ', killed, " Killed | ",injured, " Injured"))
map_data <- mutate(map_data, size = killed + injured)
options <- list(
scope='usa',
showland=TRUE,
subunitcolor=toRGB("black"),
countrycolor=toRGB("black"),
landcolor=toRGB("gray"),
countrywidth=.5,
contryheight=.5
)
m <- list(colorbar = list(title ="Number of People Killed"))
plot_ly(map_data,lat=lat,lon=lng,type='scattergeo', text = hover, size = size, locationmode='USA-states', color = toRGB('red'), mode='markers', hoverinfo = "text", marker=m) %>%
layout(title = "Police Shootings in the US for 2015", geo=options)
```
```{r, echo=FALSE}
state_murder_data$state = state.abb[match(state_murder_data$state, state.name)]
# give state boundaries a white border
l <- list(color = toRGB("black"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
plot_ly(state_murder_data, z = Murders, text = Murders, locations = state, type = 'choropleth',
locationmode = 'USA-states', color = toRGB('red'), colors = 'Reds',
marker = list(line = l), colorbar = list(title = "Murders")) %>%
layout(title = 'Police Shootings by State', geo = g)
```
---
title: "Assignment 6"
output: html_document
---
```{r, echo=FALSE,message=F,warning=F}
require(dplyr)
require(plotly)
require(magrittr)
require(knitr)
raw_data <- read.csv("/Users/kylegoodwin/INFO498F/a6-mapping-shootings/data/Mass-Shooting-Data.csv")
num_deadly <- filter(raw_data, killed > 0)$state %>% length()
murdered <- group_by(raw_data,city) %>%
summarize(Murders = sum(killed)) %>%
filter(Murders != 0) %>%
arrange(desc(Murders))
state_murder_data <- group_by(raw_data,state) %>%
summarize(Murders = sum(killed)) %>%
filter(Murders != 0) %>%
arrange(desc(Murders))
lives_lost <- sum(raw_data$killed)
num_shootings <- length(raw_data$state)
```
In 2015 in the United States, there were
`r kable(murdered)`
```{r, echo=FALSE}
map_data <- mutate(raw_data,hover= paste0(city,': ', killed, " Killed | ",injured, " Injured"))
map_data <- mutate(map_data, size = killed + injured)
options <- list(
scope='usa',
showland=TRUE,
subunitcolor=toRGB("black"),
countrycolor=toRGB("black"),
landcolor=toRGB("gray"),
countrywidth=.5,
contryheight=.5
)
m <- list(colorbar = list(title ="Number of People Killed"))
plot_ly(map_data,lat=lat,lon=lng,type='scattergeo', text = hover, size = size, locationmode='USA-states', color = toRGB('red'), mode='markers', hoverinfo = "text", marker=m) %>%
layout(title = "Police Shootings in the US for 2015", geo=options)
```
```{r, echo=FALSE}
state_murder_data$state = state.abb[match(state_murder_data$state, state.name)]
# give state boundaries a white border
l <- list(color = toRGB("black"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
plot_ly(state_murder_data, z = Murders, text = Murders, locations = state, type = 'choropleth',
locationmode = 'USA-states', color = toRGB('red'), colors = 'Reds',
marker = list(line = l), colorbar = list(title = "Murders")) %>%
layout(title = 'Police Shootings by State', geo = g)
```
raw_data[1]
test <- slice(raw_data, 1:3 )
View(test)
top_three_cities <- slice(murdered, 1:3)
map_data <- mutate(raw_data,hover= paste0(city,': ', killed, " Killed | ",injured, " Injured"))
map_data <- mutate(map_data, size = killed + injured)
options <- list(
scope='usa',
showland=TRUE,
subunitcolor=toRGB("black"),
countrycolor=toRGB("black"),
landcolor=toRGB("gray"),
countrywidth=.5,
contryheight=.5
)
m <- list(colorbar = list(title ="Number of People Killed"), size=map_data$size)
plot_ly(map_data,lat=lat,lon=lng,type='scattergeo', text = hover, locationmode='USA-states', color = toRGB('red'), mode='markers', hoverinfo = "text", marker=m) %>%
layout(title = "Police Shootings in the US for 2015", geo=options)
map_data <- mutate(raw_data,hover= paste0(city,': ', killed, " Killed | ",injured, " Injured"))
map_data <- mutate(map_data, size = killed + injured)
options <- list(
scope='usa',
showland=TRUE,
subunitcolor=toRGB("black"),
countrycolor=toRGB("black"),
landcolor=toRGB("gray"),
countrywidth=.5,
contryheight=.5
)
m <- list(colorbar = list(title ="Number of People Killed"), size=map_data$size*3)
plot_ly(map_data,lat=lat,lon=lng,type='scattergeo', text = hover, locationmode='USA-states', color = toRGB('red'), mode='markers', hoverinfo = "text", marker=m) %>%
layout(title = "Police Shootings in the US for 2015", geo=options)
map_data <- mutate(raw_data,hover= paste0(city,': ', killed, " Killed | ",injured, " Injured"))
map_data <- mutate(map_data, size = killed + injured)
options <- list(
scope='usa',
showland=TRUE,
subunitcolor=toRGB("black"),
countrycolor=toRGB("black"),
landcolor=toRGB("gray"),
countrywidth=.5,
contryheight=.5
)
m <- list(colorbar = list(title ="Number of People Killed"), size=map_data$size*3, opacity =map_data$size/max(map_data$size))
plot_ly(map_data,lat=lat,lon=lng,type='scattergeo', text = hover, locationmode='USA-states', color = toRGB('red'), mode='markers', hoverinfo = "text", marker=m) %>%
layout(title = "Police Shootings in the US for 2015", geo=options)
map_data <- mutate(raw_data,hover= paste0(city,': ', killed, " Killed | ",injured, " Injured"))
map_data <- mutate(map_data, size = killed + injured)
options <- list(
scope='usa',
showland=TRUE,
subunitcolor=toRGB("black"),
countrycolor=toRGB("black"),
landcolor=toRGB("gray"),
countrywidth=.5,
contryheight=.5
)
m <- list(colorbar = list(title ="Number of People Killed"), size=map_data$size*3, opacity =map_data$size/max(map_data$size) + .25)
plot_ly(map_data,lat=lat,lon=lng,type='scattergeo', text = hover, locationmode='USA-states', color = toRGB('red'), mode='markers', hoverinfo = "text", marker=m) %>%
layout(title = "Police Shootings in the US for 2015", geo=options)
---
title: "Mass Shootings in the United States"
output: html_document
---
```{r, echo=FALSE,message=F,warning=F}
require(dplyr)
require(plotly)
require(magrittr)
require(knitr)
raw_data <- read.csv("/Users/kylegoodwin/INFO498F/a6-mapping-shootings/data/Mass-Shooting-Data.csv")
num_deadly <- filter(raw_data, killed > 0)$state %>% length()
murdered <- group_by(raw_data,city) %>%
summarize(Murders = sum(killed)) %>%
filter(Murders != 0) %>%
arrange(desc(Murders))
state_murder_data <- group_by(raw_data,state) %>%
summarize(Murders = sum(killed)) %>%
filter(Murders != 0) %>%
arrange(desc(Murders))
lives_lost <- sum(raw_data$killed)
num_shootings <- length(raw_data$state)
top_three_cities <- slice(murdered, 1:3)
top_three_cities <- rename(top_three_cities, City = city)
```
In 2015 in the United States, there were `r num_shootings` mass shootings, accounting for a total of `r lives_lost` lives lost. The three cities with the most fatalities from mass shootings were `r top_three_cities$City[1]`,`r top_three_cities$City[2]`, and `r top_three_cities$City[3]`
Cities With Most Lives Lost to Mass Shootings
=============================================
`r kable(top_three_cities)`
```{r, echo=FALSE,warning=F,message=F}
map_data <- mutate(raw_data,hover= paste0(city,': ', killed, " Killed | ",injured, " Injured"))
map_data <- mutate(map_data, size = killed + injured)
options <- list(
scope='usa',
showland=TRUE,
subunitcolor=toRGB("black"),
countrycolor=toRGB("black"),
landcolor=toRGB("gray"),
countrywidth=.5,
contryheight=.5
)
m <- list(colorbar = list(title ="Number of People Killed"), size=map_data$size*1.5, opacity =map_data$size/max(map_data$size) + .25, colorscale =Rainbow)
plot_ly(map_data,lat=lat,lon=lng,type='scattergeo', text = hover, locationmode='USA-states', mode='markers', hoverinfo = "text", marker=m) %>%
layout(title = "Mass Shootings in the US for 2015", geo=options)
```
**Mass Murders By State**
`r kable(state_murder_data)`
```{r, echo=FALSE,warning=F,message=F}
state_murder_data$state = state.abb[match(state_murder_data$state, state.name)]
# give state boundaries a white border
l <- list(color = toRGB("black"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
plot_ly(state_murder_data, z = Murders, text = Murders, locations = state, type = 'choropleth',
locationmode = 'USA-states', color = toRGB('red'), colors = 'Reds',
marker = list(line = l), colorbar = list(title = "Murders")) %>%
layout(title = 'Mass Shootings by State', geo = g)
```
map_data <- mutate(raw_data,hover= paste0(city,': ', killed, " Killed | ",injured, " Injured"))
map_data <- mutate(map_data, size = killed + injured)
options <- list(
scope='usa',
showland=TRUE,
subunitcolor=toRGB("black"),
countrycolor=toRGB("black"),
landcolor=toRGB("gray"),
countrywidth=.5,
contryheight=.5
)
m <- list(colorbar = list(title ="Number of People Killed"), size=map_data$size*1.5, opacity =map_data$size/max(map_data$size) + .25, colorscale =Rainbow)
plot_ly(map_data,lat=lat,lon=lng,type='scattergeo', color = size, text = hover, locationmode='USA-states', mode='markers', hoverinfo = "text", marker=m) %>%
layout(title = "Mass Shootings in the US for 2015", geo=options)
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
View(data)
makeVis <- function(data){
group_by(data, class) %>% summarize(length(class))
}
makeVis <- function(data){
chartdata <- group_by(data, class) %>% summarize( Number = length(class))
}
makeVis(data)
require(magrittr)
}
makeVis(data)
require(dplyr)
makeVis(data)
source("/Users/kylegoodwin/INFO498F/a7-collaborative-coding/scripts/")
require(dplyr)
#reads in Kyle's chart 1 file
source("/Users/kylegoodwin/INFO498F/a7-collaborative-coding/scripts/")
#reads in the survey data
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
data <- rename(data, class = What.is.your.current.class.standing.)
data <- rename(data, interested_in_info = Are.you.interested.in.applying.to.the.Informatics.major.)
data <- rename(data, operating_system = What.operating.system.do.you.typically.use.)
white <- c(3,5,4,7,4,5,6,4,3,2)
black <- c(4,8,7,3,5,4,5,4)
sd(white)
sd(black)
mean(white)
mean(black)
price <- c(29,40,54,55,72)
mean(price)
lost <- c(.49,1.59,1.69,1.82,3.1)
mean(lost)
sd(price)
sd(lost)
( 16.325 * .928)
(29-50)(.49-1.738) / 15.15 + (40-50)(1.59-.928)/15.15 + (54-50)(1.69-.928)/15.15 + (55-50)(1.82-.928)/15.15 + (72-50)(3.1 -.928)/15.15
(29-50)(.49-1.738)/ 15.15 + (40-50)(1.59-.928)/15.15 + (54-50)(1.69-.928)/15.15 + (55-50)(1.82-.928)/15.15 + (72-50)(3.1 -.928)/15.15
(29-50)*(.49-1.738)/ 15.15 + (40-50)*(1.59-.928)/15.15 + (54-50)*(1.69-.928)/15.15 + (55-50)*(1.82-.928)/15.15 + (72-50)*(3.1 -.928)/15.15
4.94*(1/4)
.955 *4
shiny::runApp('INFO498F/a8-app')
Virginica <- filter(data,Species == "Virginica")
Versicolor <- filter(data, Species == "Versicolor")
Setosa <- filter(data, Species == "Setosa")
sepal_length <- list(Virginica = mean(Virginica$Sepal.Length), Versicolor = mean(Versicolor$Sepal.Length),
Setosa = mean(Setosa$Sepal.Length))
sepal_width <- list(Virginica = mean(Virginica$Sepal.Width), Versicolor = mean(Versicolor$Sepal.Width),
Setosa = mean(Setosa$Sepal.Width))
petal_length <- list(Virginica = mean(Virginica$Petal.Length), Versicolor = mean(Versicolor$Petal.Length),
Setosa = mean(Setosa$Petal.Length))
petal_width <- list(Virginica = mean(Virginica$Petal.Width), Versicolor = mean(Versicolor$Petal.Width),
Setosa = mean(Setosa$Petal.Width))
one <- data.frame(sepal_length) %>% gather("sort","mean",1:3) %>% mutate(type = "Sepal Length")
two <- data.frame(sepal_width) %>% gather("sort","mean", 1:3) %>% mutate(type = "Sepal Width")
three <- data.frame(petal_length) %>% gather("sort","mean", 1:3) %>% mutate(type = "Petal Length")
four <- data.frame(petal_width) %>% gather("sort","mean", 1:3) %>% mutate(type = "Petal Width")
manipulate(iris)
library(dplyr)
library(tidyr)
manipulate <- function(data){
Virginica <- filter(data,Species == "Virginica")
Versicolor <- filter(data, Species == "Versicolor")
Setosa <- filter(data, Species == "Setosa")
sepal_length <- list(Virginica = mean(Virginica$Sepal.Length), Versicolor = mean(Versicolor$Sepal.Length),
Setosa = mean(Setosa$Sepal.Length))
sepal_width <- list(Virginica = mean(Virginica$Sepal.Width), Versicolor = mean(Versicolor$Sepal.Width),
Setosa = mean(Setosa$Sepal.Width))
petal_length <- list(Virginica = mean(Virginica$Petal.Length), Versicolor = mean(Versicolor$Petal.Length),
Setosa = mean(Setosa$Petal.Length))
petal_width <- list(Virginica = mean(Virginica$Petal.Width), Versicolor = mean(Versicolor$Petal.Width),
Setosa = mean(Setosa$Petal.Width))
one <- data.frame(sepal_length) %>% gather("sort","mean",1:3) %>% mutate(type = "Sepal Length")
two <- data.frame(sepal_width) %>% gather("sort","mean", 1:3) %>% mutate(type = "Sepal Width")
three <- data.frame(petal_length) %>% gather("sort","mean", 1:3) %>% mutate(type = "Petal Length")
four <- data.frame(petal_width) %>% gather("sort","mean", 1:3) %>% mutate(type = "Petal Width")
return(big <- merge(one,two,all=TRUE) %>% merge(three,all=TRUE) %>% merge(four,all=TRUE))
}
manipulate(iris)
test <- manipulate(iris)
View(test)
shiny::runApp('INFO498F/a8-app')
shiny::runApp('INFO498F/a8-app')
View(iris)
View(test)
shiny::runApp('INFO498F/a8-app')
shiny::runApp('INFO498F/a8-app')
shiny::runApp('INFO498F/a8-app')
x <- c(12,14,17,10,8,9,12,14,18,16)
y <- c(2,1,0,3,5,3,4,2,0,2)
length(x)
length(y)
mean(x)
mean(y)
sd(x)
sd(y)
salaries <- csv("Users/kylegoodwin/INFO498F/final-project/data/AnnualSalary.csv")
salaries <- read.csv("Users/kylegoodwin/INFO498F/final-project/data/AnnualSalary.csv")
salaries <- read.csv("users/kylegoodwin/INFO498F/final-project/data/AnnualSalary.csv")
salaries <- read.csv("/Users/kylegoodwin/INFO498F/final-project/data/AnnualSalary.csv")
View(salaries)
getIntegerData <- function(data){
data <- as.numeric(gsub(",", "", data$Sal2014))
return (data)
}
salaries <- getIntegerData(salaries)
salaries <- read.csv("/Users/kylegoodwin/INFO498F/final-project/data/AnnualSalary.csv")
getIntegerData(salaries)
salaries <- getIntegerData(salaries)
getIntegerData <- function(data){
data$Sal2014 <- as.numeric(gsub(",", "", data$Sal2014))
return (data)
}
salaries <- read.csv("/Users/kylegoodwin/INFO498F/final-project/data/AnnualSalary.csv")
salaries <- getIntegerData(salaries)
require(dplyr)
getIntegerData <- function(data){
rename(data, 2012 = Sal2012)
rename(data, 2013 = Sal20131)
rename(data, 2012 = Sal20121)
rename(data, 2011 = Sal20111)
data$Sal2014 <- as.numeric(gsub(",", "", data$Sal2014))
data$Sal
return (data)
}
source("scripts/format.R")
setwd("/Users/kylegoodwin/INFO498F/final-project/")
salaries <- read.csv("data/AnnualSalary.csv")
source("scripts/format.R")
salaries <- getIntegerData(salaries)
salaries <- read.csv("data/AnnualSalary.csv")
getIntegerData(salaries)
getIntegerData <- function(data){
data <- rename(data, 2012 = Sal2012)
data <- rename(data, 2013 = Sal20131)
data <- rename(data, 2012 = Sal20121)
data <- rename(data, 2011 = Sal20111)
data$Sal2014 <- as.numeric(gsub(",", "", data$Sal2014))
return (data)
}
new <- getIntegerData(salaries)
View(salaries)
source("scripts/format.R")
new <- getIntegerData(salaries)
View(new)
